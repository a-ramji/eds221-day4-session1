---
title: "EDS 221 Day 4 Computer Session 1"
author: "Anna Ramji"
format: html
editor: visual
---

## Functions

```{r}
library(tidyverse)
library(here)
```

make a function that doubles a value.

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}
```

```{r}
double_value(2)
double_value(my_dollars = 10.13)
```

```{r}
# returns error bc only expecting one numeric argument
#double_value(my_dollars = 10.13, 5)
```

```{r}
monthly_income <- c(42.50, 61.75, 89.50)

# uses function on every value in the vector 

double_value(monthly_income)
```

Create a function that returns an awesome restaurant name given a cool animal and your favorite food.

```{r}
name_restaurant <- function(animal, food) {
  return(paste0(animal, food))
}
```

```{r}
name_restaurant(animal = "Hawk", food = "Pizza")
```

Given temperature in degrees Fahrenheit, write a function that converts it to Celsius.

(°F − 32) × 5/9 = 0°C

```{r}
f_to_c <- function(f_temp) {
  converted_temp = round((((f_temp - 32) * 5) / 9), digits = 2)
  return(paste(f_temp, "degrees Fahrenheit is",
                 converted_temp, "degrees Celsius"))
}
```

```{r}
f_to_c(f_temp = 52)
f_to_c(100)
```

OR

```{r}
convert_f_to_c <- function(temp_f) {
  converted_temp = round((((temp_f - 32) * 5) / 9), digits = 2)
  print(converted_temp)
}
```

```{r}
convert_f_to_c(temp_f = 52)
```

Create a function that given inputs of age and hometown, returns "I am \_\_ years old, and I'm from \_\_"

```{r}
about_me <- function(age, hometown) {
  print(paste0("I am ", age, " years old, and I'm from ", hometown, "."))
}
```

```{r}
about_me(23, "San Anselmo")
```

We don't always want to print immediately.

We also don't always need to say "return" in R

-   it's storing the value for you automatically

```{r}
double_value_2 <- function(dollars) {
  dollars * 2
}
```

```{r}
double_value_2(dollars = 10) * 0.08
```

#### Print statements and return statements

Print: "show me", Return: "store this so I can use it later"

## Functions with Conditions

```{r}
calculate_animal_age <- function(animal, age_human_years) {
  if (animal == "dog") {
   # age = 
      age_human_years * 7
  } else if (animal == "goat") {
  #  age = 
      age_human_years * 4.7
  } else 
    print(paste("Sorry, I only calculate dog and goat ages"))
}
```

```{r}
calculate_animal_age(animal = "dog", age_human_years = 10)

calculate_animal_age(animal = "goat", age_human_years = 4)

# in this last example, nothing happens. You don't get an error -- your if statements aren't even evaluated. 
# Once we update the function above to include an "else" statement message, we get a more helpful experience. 
calculate_animal_age(animal = "whale", age_human_years = 10)
```

Write a function that, given temperature in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "english" then return degrees in Fahrenheit.

```{r}
convert_kelvin <- function(initial_temp_k, scale) {
  if (scale == "metric") {
    return(initial_temp_k - 273.15)
  } else if (scale == "english") {
    return(((initial_temp_k - 273.15) * (9/5) + 32))
  } else
    print("I'm sorry, I only convert degrees Kelvin to Celsius or Fahrenheit")
}
```

```{r}
convert_kelvin(initial_temp_k = 40, scale = "metric")
```

```{r}
convert_kelvin(100, "metric")
convert_kelvin(100, "english")
convert_kelvin(100, "kelvin")
```

### After Lunch :) 

## More functions

Create a subset within a function and then return something based on that subset.

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), 
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))

```

create a function that returns a string - this dog's favorite food is \_\_\_.

```{r}

dog_menu <- function(enter_dog_name) {
  my_subset <- filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}
```

```{r}
# we can run the following line in the console to check our data / work 
# filter(dog_choice, dog_name == "Waffle")
```

```{r}
# or like this
dog_choice |> 
  filter(dog_name == "Waffle")
```

```{r}
dog_menu("Waffle")

dog_menu(enter_dog_name = "Waffle")
```

## Function with a for loop

manually create a function that iterates over the columns in the data frame, calculates mean values, stores them, and has an output that states what those mean values are.

```{r}
# apply and across could do some of this for us, but let's go over it w for loops for practice!

#remember, seq_along gives a length of the number of COLUMNS in a data frame!

df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- round(mean(df[[i]], na.rm = TRUE), 2) # double square brakcets to get just the vector of values from that column in the data frame.
    column_name <- colnames(df[i]) # gets the name of the i-th column of the data frame
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
df_means(df = mtcars)
```

```{r}
# colnames(mtcars[2]) # returns "cyL"

# colnames(mtcars[[2]]) # returns "NULL"
```
